-- CREATE TABLE employee(
-- 	emp_id SERIAL PRIMARY KEY,
-- 	first_name VARCHAR(50) NOT NULL,
-- 	last_name VARCHAR(50) NOT NULL,
-- 	job_position VARCHAR(50) NOT NULL,
-- 	salary NUMERIC(8,2),
-- 	start_date DATE NOT NULL,
-- 	birth_date DATE NOT NULL,
-- 	store_id INT,
-- 	department_id INT,
-- 	manager_id INT
-- );

-- CREATE TABLE departments(
-- 	department_id SERIAL NOT NULL,
-- 	department VARCHAR(50) NOT NULL,
-- 	division VARCHAR(50) NOT NULL
-- );



-- - Set the column department_id to not null.
-- - Add a default value of CURRENT_DATE to the column start_date.
-- - Add the column end_date with an appropriate data type (one that you think makes sense).
-- - Add a constraint called birth_check that doesn't allow birth dates that are in the future.
-- - Rename the column job_position to position_title.

-- ALTER TABLE employee
-- ALTER COLUMN department_id SET NOT NULL; 

-- ALTER TABLE employee
-- ALTER COLUMN start_date SET DEFAULT CURRENT_DATE;

-- ALTER TABLE employee
-- ADD COLUMN end_date TIMESTAMP;

-- ALTER TABLE employee
-- ADD CONSTRAINT birth_check CHECK(birth_date < CURRENT_DATE);

-- ALTER TABLE employee
-- RENAME COLUMN job_position TO position_title;

-- ALTER TABLE employee
-- ALTER COLUMN end_date TYPE DATE;

-- INSERT INTO employee(
-- 	emp_id,first_name,last_name,position_title,
-- 	salary,start_date,birth_date,store_id,
-- 	department_id,manager_id,end_date)
-- VALUES
--     (1,'Morrie','Conaboy','CTO',21268.94,'2005-04-30','1983-07-10',1,1,NULL,NULL),
--     (2,'Miller','McQuarter','Head of BI',14614.00,'2019-07-23','1978-11-09',1,1,1,NULL),
--     (3,'Christalle','McKenny','Head of Sales',12587.00,'1999-02-05','1973-01-09',2,3,1,NULL),
--     (4,'Sumner','Seares','SQL Analyst',9515.00,'2006-05-31','1976-08-03',2,1,6,NULL),
--     (5,'Romain','Hacard','BI Consultant',7107.00,'2012-09-24','1984-07-14',1,1,6,NULL),
--     (6,'Ely','Luscombe','Team Lead Analytics',12564.00,'2002-06-12','1974-08-01',1,1,2,NULL),
--     (7,'Clywd','Filyashin','Senior SQL Analyst',10510.00,'2010-04-05','1989-07-23',2,1,2,NULL),
--     (8,'Christopher','Blague','SQL Analyst',9428.00,'2007-09-30','1990-12-07',2,2,6,NULL),
--     (9,'Roddie','Izen','Software Engineer',4937.00,'2019-03-22','2008-08-30',1,4,6,NULL),
--     (10,'Ammamaria','Izhak','Customer Support',2355.00,'2005-03-17','1974-07-27',2,5,3,'2013-04-14'),
--     (11,'Carlyn','Stripp','Customer Support',3060.00,'2013-09-06','1981-09-05',1,5,3,NULL),
--     (12,'Reuben','McRorie','Software Engineer',7119.00,'1995-12-31','1958-08-15',1,5,6,NULL),
--     (13,'Gates','Raison','Marketing Specialist',3910.00,'2013-07-18','1986-06-24',1,3,3,NULL),
--     (14,'Jordanna','Raitt','Marketing Specialist',5844.00,'2011-10-23','1993-03-16',2,3,3,NULL),
--     (15,'Guendolen','Motton','BI Consultant',8330.00,'2011-01-10','1980-10-22',2,3,6,NULL),
--     (16,'Doria','Turbat','Senior SQL Analyst',9278.00,'2010-08-15','1983-01-11',1,1,6,NULL),
--     (17,'Cort','Bewlie','Project Manager',5463.00,'2013-05-26','1986-10-05',1,5,3,NULL),
--     (18,'Margarita','Eaden','SQL Analyst',5977.00,'2014-09-24','1978-10-08',2,1,6,'2020-03-16'),
--     (19,'Hetty','Kingaby','SQL Analyst',7541.00,'2009-08-17','1999-04-25',1,2,6,NULL),
--     (20,'Lief','Robardley','SQL Analyst',8981.00,'2002-10-23','1971-01-25',2,3,6,'2016-07-01'),
--     (21,'Zaneta','Carlozzi','Working Student',1525.00,'2006-08-29','1995-04-16',1,3,6,'2012-02-19'),
--     (22,'Giana','Matz','Working Student',1036.00,'2016-03-18','1987-09-25',1,3,6,NULL),
--     (23,'Hamil','Evershed','Web Developper',3088.00,'2022-02-03','2012-03-30',1,4,2,NULL),
--     (24,'Lowe','Diamant','Web Developper',6418.00,'2018-12-31','2002-09-07',1,4,2,NULL),
--     (25,'Jack','Franklin','SQL Analyst',6771.00,'2013-05-18','2005-10-04',1,2,2,NULL),
--     (26,'Jessica','Brown','SQL Analyst',8566.00,'2003-10-23','1965-01-29',1,1,2,NULL)


-- INSERT INTO departments(department_id, department, division)
-- VALUES
-- 	(1, 'Analytics', 'IT'),
-- 	(2, 'Finance', 'Administration'),
-- 	(3, 'Sales', 'Sales'),
-- 	(4, 'Website', 'IT'),
-- 	(5, 'Back Office', 'Administration');


SELECT
*
FROM employee
WHERE first_name = 'Jack'
AND last_name = 'Franklin';

-- UPDATE employee SET position_title = 'Senior SQL Analyst'
-- WHERE emp_id = 25;

-- UPDATE employee SET position_title = 'Customer Specialist'
-- WHERE position_title = 'Customer Support';

-- UPDATE employee SET salary = salary * 1.06
-- WHERE position_title IN ('SQL Analyst', 'Senior SQL Analyst');

SELECT 
ROUND(AVG(salary), 2)
FROM employee
WHERE position_title = 'SQL Analyst';

SELECT
emp.emp_id,
emp.first_name,
emp.last_name,
emp.position_title,
-- emp.end_date,
CONCAT(mng.first_name, ' ', mng.last_name),
CASE
	WHEN emp.end_date IS NULL THEN 'True'
	ELSE 'False'
END as is_active
FROM employee emp
LEFT JOIN employee mng
ON emp.manager_id = mng.emp_id
ORDER BY emp_id;

-- we select data from employee table 
-- then we concat first_name and last_name for manager
-- we join the same table employee as mng
-- on emp.manager_id = mng.emp_id
-- first we check who is manager for employee 
-- and then in mng table we check which name fits for this id

-- CREATE VIEW v_employees_info
-- AS
-- SELECT
-- emp.emp_id,
-- emp.first_name,
-- emp.last_name,
-- emp.position_title,
-- -- emp.end_date,
-- CONCAT(mng.first_name, ' ', mng.last_name),
-- CASE
-- 	WHEN emp.end_date IS NULL THEN 'True'
-- 	ELSE 'False'
-- END as is_active
-- FROM employee emp
-- LEFT JOIN employee mng
-- ON emp.manager_id = mng.emp_id
-- ORDER BY emp_id;

SELECT * FROM v_employees_info;


SELECT
position_title,
ROUND(AVG(salary), 2)
FROM employee
GROUP BY position_title
ORDER BY position_title;


SELECT 
division,
ROUND(AVG(salary), 2)
FROM employee as e
JOIN departments as d
ON d.department_id = e.department_id
GROUP BY division;


SELECT
emp_id,
first_name,
last_name,
position_title,
salary,
ROUND(AVG(salary) OVER(PARTITION BY position_title), 2)
FROM employee
GROUP BY
emp_id,
first_name,
last_name,
position_title,
salary
ORDER BY emp_id;


SELECT
COUNT(emp_id)
FROM
(SELECT
emp_id,
salary,
position_title,
ROUND(AVG(salary) OVER(PARTITION BY position_title), 2) as avg_salary
FROM employee)
WHERE salary < avg_salary;

-- first I check emp_id, salary, position_title and avg_salary for position_title
-- then I use this as a subquery and select COUNT(*) from it
-- where salary of employee is lower than the average

SELECT
avg_pos_sal
FROM
(SELECT
emp_id,
salary,
start_date,
SUM(salary) OVER(ORDER BY start_date) AS avg_pos_sal
FROM employee
ORDER BY start_date)
WHERE start_date BETWEEN '2018-12-31' AND '2019-01-01';

-- CREATE VIEW v_avg_pos_sal_info
-- AS
-- SELECT
-- emp_id,
-- salary,
-- start_date,
-- SUM(salary) OVER(ORDER BY start_date) AS avg_pos_sal
-- FROM employee
-- ORDER BY start_date;

SELECT
avg_pos_sal
FROM
(SELECT
emp_id,
salary,
start_date,
SUM(salary) OVER(ORDER BY start_date) AS avg_pos_sal
FROM employee
WHERE end_date IS NULL
ORDER BY start_date)
WHERE start_date BETWEEN '2018-12-31' AND '2019-01-01';


SELECT
*
FROM
(SELECT
first_name,
position_title,
salary
FROM employee
WHERE salary IN (SELECT MAX(salary) FROM employee
			    GROUP BY position_title))
WHERE position_title = 'SQL Analyst';



SELECT
first_name,
position_title,
salary,
(SELECT ROUND(AVG(salary),2) FROM employee e2
 WHERE e1.position_title = e2.position_title) as avg_per_position
FROM employee e1
WHERE salary IN (SELECT MAX(salary) FROM employee
			    GROUP BY position_title);
				
				


SELECT 
*
FROM
(SELECT
first_name,
position_title,
salary,
(SELECT ROUND(AVG(salary),2) FROM employee e2
 WHERE e1.position_title = e2.position_title) as avg_per_position
FROM employee e1
WHERE salary IN (SELECT MAX(salary) FROM employee
			    GROUP BY position_title))
WHERE salary = avg_per_position;



SELECT
division,
department,
position_title,
SUM(salary) as sum_salary,
COUNT(*) as no_of_emp,
ROUND(AVG(salary),2) as avg_salary
FROM employee as e
JOIN departments as d
ON d.department_id = e.department_id
GROUP BY 
ROLLUP(
	division,
	department,
	position_title
	)
ORDER BY division, department, position_title, sum_salary;



SELECT
*
FROM
(SELECT
emp_id,
position_title,
department,
salary,
RANK() OVER(PARTITION BY department ORDER BY salary DESC) as salary_rank
FROM employee
NATURAL JOIN departments)
WHERE salary_rank = 7
AND department = 'Analytics';



SELECT
*
FROM
(SELECT
emp_id,
position_title,
department,
salary,
RANK() OVER(PARTITION BY department ORDER BY salary DESC) as salary_rank
FROM employee
NATURAL JOIN departments)
WHERE salary_rank = 1;


CREATE OR REPLACE FUNCTION name_search(first_n TEXT, last_n TEXT)
RETURNS DECIMAL
LANGUAGE plpgsql
AS
$$
DECLARE
sal DECIMAL;
BEGIN

SELECT 
SUM(amount)
INTO sal
FROM payment p
JOIN customer c
ON c.customer_id = p.customer_id
WHERE first_name = first_n
AND last_name = last_n;
RETURN sal;
END;
$$


SELECT name_search ('AMY', 'LOPEZ');


SELECT 
SUM(amount)
FROM payment p
JOIN customer c
ON c.customer_id = p.customer_id
